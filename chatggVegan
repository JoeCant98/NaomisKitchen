import inflect  # To handle plurals
import requests  # To connect to a recipe API
from naomi import plugin

class RecipeManagerPlugin(plugin.SpeechHandlerPlugin):
    def __init__(self, *args, **kwargs):
        super(RecipeManagerPlugin, self).__init__(*args, **kwargs)
        # Initialize ingredient list and API endpoint
        self.ingredients = []
        self.dietary_preferences = []
        self.recipe_instructions = {}
        
        # Modify the API endpoint to point to Edamam's Recipe API
        self.recipe_api_endpoint = "https://api.edamam.com/api/recipes/v2"

        # Edamam API specific parameters (replace with your actual API credentials)
        self.api_app_id = "d1a764d0"
        self.api_app_key = "137d78b7bf384c229a95ba117feefd55"

    def intents(self):
        return {
            "AddIngredientIntent": {
                "locale": {
                    "en-US": {
                        "keywords": {
                            "Ingredient": ["ingredient", "add", "include"],
                        }
                    }
                },
                "action": self.add_ingredient
            },
            "SetDietaryPreferencesIntent": {
                "locale": {
                    "en-US": {
                        "keywords": {
                            "DietaryPreference": ["dietary preference", "diet", "vegan", "gluten-free"],
                        }
                    }
                },
                "action": self.set_dietary_preferences
            },
            "FindRecipeIntent": {
                "locale": {
                    "en-US": {
                        "keywords": {
                            "Recipe": ["recipe", "make", "cook"],
                        }
                    }
                },
                "action": self.find_recipe
            },
            "RecipeInstructionsIntent": {
                "locale": {
                    "en-US": {
                        "keywords": {
                            "RecipeInstructions": ["recipe instructions", "how to make"],
                        }
                    }
                },
                "action": self.recipe_instructions
            }
        }

    def add_ingredient(self, msg):
        ingredient = msg.data.get("Ingredient", "").lower()
        if ingredient:
            # Handle plurals using inflect library
            p = inflect.engine()
            singular = p.singular_noun(ingredient)
            if singular:
                ingredient = singular  # Convert to singular if plural
            self.ingredients.append(ingredient)
            self.speak(f"Added {ingredient} to your ingredients list.")

    def set_dietary_preferences(self, msg):
        preferences = msg.data.get("DietaryPreference", [])
        self.dietary_preferences = preferences
        self.speak(f"Set dietary preferences to {', '.join(preferences)}.")

    def find_recipe(self, msg):
        if not self.ingredients:
            self.speak("Your ingredients list is empty. You can add ingredients by saying 'Add [ingredient].'")
            return

        # Build the dietary query string
        dietary_query = " AND ".join([f"{preference} label:{preference}" for preference in self.dietary_preferences])

        # Connect to the Edamam recipe API to fetch recipes based on ingredients and dietary preferences
        try:
            params = {
                "type": "public",
                "app_id": self.api_app_id,
                "app_key": self.api_app_key,
                "q": ",".join(self.ingredients),
                "health": dietary_query
            }
            response = requests.get(self.recipe_api_endpoint, params=params)
            
            if response.status_code == 200:
                data = response.json()
                if "hits" in data:
                    recipes = data["hits"]
                    if recipes:
                        self.speak("Here are some matching recipes:")
                        for i, recipe in enumerate(recipes):
                            recipe_name = recipe["recipe"]["label"]
                            self.speak(f"{i + 1}. {recipe_name}")
                            self.recipe_instructions[i + 1] = recipe["recipe"]["url"]
                    else:
                        self.speak("No matching recipes found with your ingredients and dietary preferences.")
                else:
                    self.speak("No recipe data found in the API response.")
            else:
                self.speak("Failed to retrieve recipes from the API. Please try again later.")
        except Exception as e:
            self.speak("An error occurred while fetching recipes from the API. Please try again later.")

    def recipe_instructions(self, msg):
        recipe_number = msg.data.get("RecipeNumber")
        if recipe_number:
            try:
                recipe_url = self.recipe_instructions.get(int(recipe_number))
                if recipe_url:
                    self.speak(f"Here are the instructions for recipe {recipe_number}: {recipe_url}")
                else:
                    self.speak("Sorry, I couldn't find instructions for that recipe.")
            except ValueError:
                self.speak("Please specify a valid recipe number.")
